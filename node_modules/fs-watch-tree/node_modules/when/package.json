{
  "name": "when",
  "version": "1.3.0",
  "description": "A lightweight Promise and when() implementation, plus other async goodies.",
  "keywords": [
    "promises",
    "when",
    "async"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "repositories": [
    {
      "type": "git",
      "url": "https://github.com/cujojs/when"
    }
  ],
  "bugs": {
    "url": "https://github.com/cujojs/when/issues"
  },
  "maintainers": [
    {
      "name": "Brian Cavalier",
      "url": "http://hovercraftstudios.com"
    },
    {
      "name": "John Hann",
      "url": "http://unscriptable.com"
    }
  ],
  "devDependencies": {
    "buster": "~0.5"
  },
  "main": "./when",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "buster test -e node"
  },
  "readme": "Please Note: this project has moved from briancavalier/when to cujojs/when.\nAny existing forks have been automatically moved to cujojs/when. However,\nyou'll need to update your clone and submodule remotes manually.\n\nUpdate the url in your .git/config, and also .gitmodules for submodules:\n\n```\ngit://github.com/cujojs/when.git\nhttps://cujojs@github.com/cujojs/when.git\n```\n\nHelpful link for updating submodules:\n[Git Submodules: Adding, Using, Removing, Updating](http://chrisjean.com/2009/04/20/git-submodules-adding-using-removing-and-updating/)\n\n----\n\n[![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when)\n\nA lightweight [CommonJS](http://wiki.commonjs.org/wiki/Promises) [Promises/A](http://wiki.commonjs.org/wiki/Promises/A) and `when()` implementation.  It also provides several other useful Promise-related concepts, such as joining and chaining, and has a robust unit test suite.\n\nIt's **just over 1k** when compiled with Google Closure (w/advanced optimizations) and gzipped.\n\nwhen.js was derived from the async core of [wire.js](https://github.com/cujojs/wire).\n\nWhat's New?\n===========\n\n### 1.3.0\n\n* Fixed a deviation from the Promises/A spec where returning undefined from a callback or errback would cause the previous value to be forwarded.  See [#31](https://github.com/cujojs/when/issues/31)\n\t* *This could be a breaking change* if you depended on this behavior.  If you encounter problems, the solution is to ensure that your promise callbacks (registered either with `when()` or `.then()`) return what you intend, keeping in mind that not returning something is equivalent to returning `undefined`.\n* This change also restores compatibility with the promises returned by `jQuery.get()`, which seem to reject with themselves as the rejection value.  See [issue #41](https://github.com/cujojs/when/issues/43) for more information and discussion.  Thanks to [@KidkArolis](https://github.com/KidkArolis) for raising the issue.\n\n### 1.2.0\n\n* `promise.otherwise(errback)` as a shortcut for `promise.then(null, errback)`. See discussion [here](https://github.com/cujojs/when/issues/13) and [here](https://github.com/cujojs/when/issues/29). Thanks to [@jonnyreeves](https://github.com/jonnyreeves/) for suggesting the name \"otherwise\".\n* [when/debug](https://github.com/cujojs/when/wiki/when-debug) now detects exceptions that typically represent coding errors, such as SyntaxError, ReferenceError, etc. and propagates them to the host environment.  In other words, you'll get a very loud stack trace.\n\n### 1.1.1\n\n* Updated [wiki](https://github.com/cujojs/when/wiki) map/reduce examples, and added simple promise forwarding example\n* Fix for calling `when.any()` without a callback ([#33](https://github.com/cujojs/when/issues/33))\n* Fix version number in `when.js` source ([#36](https://github.com/cujojs/when/issues/36))\n\n### 1.1.0\n\n* `when.all/any/some/map/reduce` can all now accept a promise for an array in addition to an actual array as input.  This allows composing functions to do interesting things like `when.reduce(when.map(...))`\n* `when.reject(promiseOrValue)` that returns a new, rejected promise.\n* `promise.always(callback)` as a shortcut for `promise.then(callback, callback)`\n* **Highly experimental** [when/debug](https://github.com/cujojs/when/wiki/when-debug) module: a drop-in replacement for the main `when` module that enables debug logging for promises created or consumed by when.js\n\n[Full Changelog](https://github.com/cujojs/when/wiki/Changelog)\n\nQuick Start\n===========\n\n### AMD\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```javascript\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Script Tag\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. `<script src=\"path/to/when/when.js\"></script>`\n1. `when` will be available as `window.when`\n\n### Node\n\n1. `npm install git://github.com/cujojs/when` (**NOTE:** npm seems to require a url that starts with \"git\" rather than http or https)\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\nDocs & Examples\n===============\n\nSee the API section below, and the [wiki for more detailed docs](https://github.com/cujojs/when/wiki) and [examples](https://github.com/cujojs/when/wiki/Examples)\n\nAPI\n===\n\nwhen()\n------\n\nRegister a handler for a promise or immediate value:\n\n```javascript\nwhen(promiseOrValue, callback, errback, progressback)\n\n// Always returns a promise, so can be chained:\n\nwhen(promiseOrValue, callback, errback, progressback).then(anotherCallback, anotherErrback, anotherProgressback)\n```\n\n**Getting an already-resolved Promise**\n\nYou can also use `when()` to get an already-resolved promise for a value, similarly to using `when.reject()` to get a rejected promise (see below):\n\n```javascript\nvar resolved = when(anything);\n```\n\nwhen.defer()\n------------\n\nCreate a new Deferred containing separate `promise` and `resolver` parts:\n\n```javascript\nvar deferred = when.defer();\n\nvar promise = deferred.promise;\nvar resolver = deferred.resolver;\n```\n\n**Promise API**\n\n```javascript\n// var promise = deferred.promise;\n\n// then()\n// Main promise API\n// Register callback, errback, and/or progressback\npromise.then(callback, errback, progressback);\n```\n\n**Extended Promise API**\n\nConvenience methods that are not part of the Promises/A proposal.\n\n```js\n// always()\n// Register an alwaysback that will be called when the promise resolves or rejects\npromise.always(alwaysback [, progressback]);\n\n// otherwise()\n// Convenience method to register only an errback\npromise.otherwise(errback);\n```\n\n**Resolver API**\n\n```javascript\n// var resolver = deferred.resolver;\nresolver.resolve(value);\nresolver.reject(err);\nresolver.progress(update);\n```\n\nThe deferred has the full `promise` + `resolver` API:\n\n```javascript\ndeferred.then(callback, errback, progressback);\ndeferred.resolve(value);\ndeferred.reject(reason);\ndeferred.progress(update);\n```\n\nwhen.reject()\n-------------\n\n```javascript\nvar rejected = when.reject(anything);\n```\n\nReturn a rejected promise for the supplied promiseOrValue. If promiseOrValue is a value, it will be the rejection value of the returned promise.  If promiseOrValue is a promise, its completion value will be the rejected value of the returned promise.\n\nThis can be useful in situations where you need to reject a promise *without* throwing an exception.  For example, it allows you to propagate a rejection with the value of another promise.\n\n```javascript\nwhen(doSomething(),\n\thandleSuccess,\n\tfunction(error) {\n\t\t// doSomething failed, but we want to do some processing on the error\n\t\t// to return something more useful to the caller.\n\t\t// This allows processError to return either a value or a promise.\n\t\treturn when.reject(processError(e));\n\t}\n);\n```\n\nwhen.isPromise()\n----------------\n\n```javascript\nvar is = when.isPromise(anything);\n```\n\nReturn true if `anything` is truthy and implements the then() promise API.  Note that this will return true for both a deferred (i.e. `when.defer()`), and a `deferred.promise` since both implement the promise API.\n\nwhen.some()\n-----------\n\n```javascript\nwhen.some(promisesOrValues, howMany, callback, errback, progressback)\n```\n\nReturn a promise that will resolve when `howMany` of the supplied `promisesOrValues` have resolved.  The resolution value of the returned promise will be an array of length `howMany` containing the resolutions values of the triggering `promisesOrValues`.\n\nwhen.all()\n----------\n\n```javascript\nwhen.all(promisesOrValues, callback, errback, progressback)\n```\n\nReturn a promise that will resolve only once *all* the supplied `promisesOrValues` have resolved.  The resolution value of the returned promise will be an array containing the resolution values of each of the `promisesOrValues`.\n\nwhen.any()\n----------\n\n```javascript\nwhen.any(promisesOrValues, callback, errback, progressback)\n```\n\nReturn a promise that will resolve when any one of the supplied `promisesOrValues` has resolved.  The resolution value of the returned promise will be the resolution value of the triggering `promiseOrValue`.\n\nwhen.chain()\n------------\n\n```javascript\nwhen.chain(promiseOrValue, resolver, optionalValue)\n```\n\nEnsure that resolution of `promiseOrValue` will complete `resolver` with the completion value of `promiseOrValue`, or instead with `optionalValue` if it is provided.\n\nReturns a new promise that will complete when `promiseOrValue` is completed, with the completion value of `promiseOrValue`, or instead with `optionalValue` if it is provided.\n\n**Note:** If `promiseOrValue` is not an immediate value, it can be anything that supports the promise API (i.e. `then()`), so you can pass a `deferred` as well.  Similarly, `resolver` can be anything that supports the resolver API (i.e. `resolve()`, `reject()`), so a `deferred` will work there, too.\n\nwhen.map()\n----------\n\n```javascript\nwhen.map(promisesOrValues, mapFunc)\n```\n\nTraditional map function, similar to `Array.prototype.map()`, but allows input to contain promises and/or values, and mapFunc may return either a value or a promise.\n\nThe map function should have the signature:\n\n```javascript\nmapFunc(item)\n```\n\nWhere:\n\n* `item` is a fully resolved value of a promise or value in `promisesOrValues`\n\nwhen.reduce()\n-------------\n\n```javascript\nwhen.reduce(promisesOrValues, reduceFunc, initialValue)\n```\n\nTraditional reduce function, similar to `Array.prototype.reduce()`, but input may contain promises and/or values, and reduceFunc may return either a value or a promise, *and* initialValue may be a promise for the starting value.\n\nThe reduce function should have the signature:\n\n```javascript\nreduceFunc(currentValue, nextItem, index, total)\n```\n\nWhere:\n\n* `currentValue` is the current accumulated reduce value\n* `nextItem` is the fully resolved value of the promise or value at `index` in `promisesOrValues`\n* `index` the *basis* of `nextItem` ... practically speaking, this is the array index of the promiseOrValue corresponding to `nextItem`\n* `total` is the total number of items in `promisesOrValues`\n\nwhen/apply\n----------\n\n```javascript\nfunction functionThatAcceptsMultipleArgs(array) {\n    // ...\n}\n\nvar functionThatAcceptsAnArray = apply(functionThatAcceptsMultipleArgs);\n```\n\nHelper that allows using callbacks that take multiple args, instead of an array, with `when.all/some/map`:\n\n```javascript\nwhen.all(arrayOfPromisesOrValues, apply(functionThatAcceptsMultipleArgs));\n```\n\n[See the wiki](https://github.com/cujojs/when/wiki/when-apply) for more info and examples.\n\nRunning the Unit Tests\n======================\n\nInstall [buster.js](http://busterjs.org/)\n\n`npm install -g buster`\n\nRun unit tests in Node:\n\n1. `buster test -e node`\n\nRun unit tests in Browsers (and Node):\n\n1. `buster server` - this will print a url\n2. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n3. `buster test` or `buster test -e browser`\n\nReferences\n----------\n\nMuch of this code was inspired by @[unscriptable](https://github.com/unscriptable)'s [tiny promises](https://github.com/unscriptable/promises), the async innards of [wire.js](https://github.com/cujojs/wire), and some gists [here](https://gist.github.com/870729), [here](https://gist.github.com/892345), [here](https://gist.github.com/894356), and [here](https://gist.github.com/894360)\n\nSome of the code has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/cujojs/when"
  },
  "homepage": "https://github.com/cujojs/when",
  "_id": "when@1.3.0",
  "_shasum": "899e889b929e52dae8742f93b3d4b35a87be3d7b",
  "_from": "https://github.com/cujojs/when/tarball/1.3.0",
  "_resolved": "https://github.com/cujojs/when/tarball/1.3.0"
}
